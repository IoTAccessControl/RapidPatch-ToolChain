# coding: utf-8

import ctypes


# typedef struct ebpf_inst {
# 	u8 opcode;
# 	u8 dst : 4;
# 	u8 src : 4;
# 	s16 offset;
# 	s32 imm;
# } ebpf_inst;


class EbpfInst(ctypes.Structure):
	_pack_ = 1
	_fields_ = [
		("opcode", ctypes.c_uint8),
		('dst', ctypes.c_uint8, 4),
		('src', ctypes.c_uint8, 4),
		('offset', ctypes.c_int16),
		('imm', ctypes.c_int32),
	]

	def dump(self):
		print(f"op={self.opcode} src={self.src} dst={self.dst}")


EBPF_CLS_MASK = 0x07
EBPF_ALU_OP_MASK = 0xf0
EBPF_CLS_LD = 0x00
EBPF_CLS_LDX = 0x01
EBPF_CLS_ST = 0x02
EBPF_CLS_STX = 0x03
EBPF_CLS_ALU = 0x04
EBPF_CLS_JMP = 0x05
EBPF_CLS_ALU64 = 0x07

EBPF_SRC_IMM = 0x00
EBPF_SRC_REG = 0x08

EBPF_SIZE_W = 0x00
EBPF_SIZE_H = 0x08
EBPF_SIZE_B = 0x10
EBPF_SIZE_DW = 0x18

# /* Other memory modes are not yet supported */
EBPF_MODE_IMM = 0x00
EBPF_MODE_MEM = 0x60

EBPF_ALU_ADD = 0x00
EBPF_ALU_SUB = 0x10
EBPF_ALU_MUL = 0x20
EBPF_ALU_DIV = 0x30
EBPF_ALU_OR = 0x40
EBPF_ALU_AND = 0x50
EBPF_ALU_LSH = 0x60
EBPF_ALU_RSH = 0x70
EBPF_ALU_NEG = 0x80
EBPF_ALU_MOD = 0xc0
EBPF_ALU_XOR = 0xa0
EBPF_ALU_ARSH = 0xc0

EBPF_OP_ADD_IMM = (EBPF_CLS_ALU | EBPF_SRC_IMM | EBPF_ALU_ADD)  # BPF_K
EBPF_OP_ADD_REG = (EBPF_CLS_ALU | EBPF_SRC_REG | EBPF_ALU_ADD)  # BPF_X
EBPF_OP_SUB_IMM = (EBPF_CLS_ALU | EBPF_SRC_IMM | EBPF_ALU_SUB)
EBPF_OP_SUB_REG = (EBPF_CLS_ALU | EBPF_SRC_REG | EBPF_ALU_SUB)
EBPF_OP_MUL_IMM = (EBPF_CLS_ALU | EBPF_SRC_IMM | 0x20)
EBPF_OP_MUL_REG = (EBPF_CLS_ALU | EBPF_SRC_REG | 0x20)
EBPF_OP_DIV_IMM = (EBPF_CLS_ALU | EBPF_SRC_IMM | 0x30)
EBPF_OP_DIV_REG = (EBPF_CLS_ALU | EBPF_SRC_REG | 0x30)
EBPF_OP_OR_IMM = (EBPF_CLS_ALU | EBPF_SRC_IMM | 0x40)
EBPF_OP_OR_REG = (EBPF_CLS_ALU | EBPF_SRC_REG | 0x40)
EBPF_OP_AND_IMM = (EBPF_CLS_ALU | EBPF_SRC_IMM | 0x50)
EBPF_OP_AND_REG = (EBPF_CLS_ALU | EBPF_SRC_REG | 0x50)
EBPF_OP_LSH_IMM = (EBPF_CLS_ALU | EBPF_SRC_IMM | 0x60)
EBPF_OP_LSH_REG = (EBPF_CLS_ALU | EBPF_SRC_REG | 0x60)
EBPF_OP_RSH_IMM = (EBPF_CLS_ALU | EBPF_SRC_IMM | 0x70)
EBPF_OP_RSH_REG = (EBPF_CLS_ALU | EBPF_SRC_REG | 0x70)
EBPF_OP_NEG = (EBPF_CLS_ALU | 0x80)
EBPF_OP_MOD_IMM = (EBPF_CLS_ALU | EBPF_SRC_IMM | 0x90)
EBPF_OP_MOD_REG = (EBPF_CLS_ALU | EBPF_SRC_REG | 0x90)
EBPF_OP_XOR_IMM = (EBPF_CLS_ALU | EBPF_SRC_IMM | 0xa0)
EBPF_OP_XOR_REG = (EBPF_CLS_ALU | EBPF_SRC_REG | 0xa0)
EBPF_OP_MOV_IMM = (EBPF_CLS_ALU | EBPF_SRC_IMM | 0xb0)
EBPF_OP_MOV_REG = (EBPF_CLS_ALU | EBPF_SRC_REG | 0xb0)
EBPF_OP_ARSH_IMM = (EBPF_CLS_ALU | EBPF_SRC_IMM | 0xc0)
EBPF_OP_ARSH_REG = (EBPF_CLS_ALU | EBPF_SRC_REG | 0xc0)
EBPF_OP_LE = (EBPF_CLS_ALU | EBPF_SRC_IMM | 0xd0)
EBPF_OP_BE = (EBPF_CLS_ALU | EBPF_SRC_REG | 0xd0)

EBPF_OP_ADD64_IMM = (EBPF_CLS_ALU64 | EBPF_SRC_IMM | 0x00)
EBPF_OP_ADD64_REG = (EBPF_CLS_ALU64 | EBPF_SRC_REG | 0x00)
EBPF_OP_SUB64_IMM = (EBPF_CLS_ALU64 | EBPF_SRC_IMM | 0x10)
EBPF_OP_SUB64_REG = (EBPF_CLS_ALU64 | EBPF_SRC_REG | 0x10)
EBPF_OP_MUL64_IMM = (EBPF_CLS_ALU64 | EBPF_SRC_IMM | 0x20)
EBPF_OP_MUL64_REG = (EBPF_CLS_ALU64 | EBPF_SRC_REG | 0x20)
EBPF_OP_DIV64_IMM = (EBPF_CLS_ALU64 | EBPF_SRC_IMM | 0x30)
EBPF_OP_DIV64_REG = (EBPF_CLS_ALU64 | EBPF_SRC_REG | 0x30)
EBPF_OP_OR64_IMM = (EBPF_CLS_ALU64 | EBPF_SRC_IMM | 0x40)
EBPF_OP_OR64_REG = (EBPF_CLS_ALU64 | EBPF_SRC_REG | 0x40)
EBPF_OP_AND64_IMM = (EBPF_CLS_ALU64 | EBPF_SRC_IMM | 0x50)
EBPF_OP_AND64_REG = (EBPF_CLS_ALU64 | EBPF_SRC_REG | 0x50)
EBPF_OP_LSH64_IMM = (EBPF_CLS_ALU64 | EBPF_SRC_IMM | 0x60)
EBPF_OP_LSH64_REG = (EBPF_CLS_ALU64 | EBPF_SRC_REG | 0x60)
EBPF_OP_RSH64_IMM = (EBPF_CLS_ALU64 | EBPF_SRC_IMM | 0x70)
EBPF_OP_RSH64_REG = (EBPF_CLS_ALU64 | EBPF_SRC_REG | 0x70)
EBPF_OP_NEG64 = (EBPF_CLS_ALU64 | 0x80)
EBPF_OP_MOD64_IMM = (EBPF_CLS_ALU64 | EBPF_SRC_IMM | 0x90)
EBPF_OP_MOD64_REG = (EBPF_CLS_ALU64 | EBPF_SRC_REG | 0x90)
EBPF_OP_XOR64_IMM = (EBPF_CLS_ALU64 | EBPF_SRC_IMM | 0xa0)
EBPF_OP_XOR64_REG = (EBPF_CLS_ALU64 | EBPF_SRC_REG | 0xa0)
EBPF_OP_MOV64_IMM = (EBPF_CLS_ALU64 | EBPF_SRC_IMM | 0xb0)
EBPF_OP_MOV64_REG = (EBPF_CLS_ALU64 | EBPF_SRC_REG | 0xb0)
EBPF_OP_ARSH64_IMM = (EBPF_CLS_ALU64 | EBPF_SRC_IMM | 0xc0)
EBPF_OP_ARSH64_REG = (EBPF_CLS_ALU64 | EBPF_SRC_REG | 0xc0)

EBPF_OP_LDXW = (EBPF_CLS_LDX | EBPF_MODE_MEM | EBPF_SIZE_W)
EBPF_OP_LDXH = (EBPF_CLS_LDX | EBPF_MODE_MEM | EBPF_SIZE_H)
EBPF_OP_LDXB = (EBPF_CLS_LDX | EBPF_MODE_MEM | EBPF_SIZE_B)
EBPF_OP_LDXDW = (EBPF_CLS_LDX | EBPF_MODE_MEM | EBPF_SIZE_DW)
EBPF_OP_STW = (EBPF_CLS_ST | EBPF_MODE_MEM | EBPF_SIZE_W)
EBPF_OP_STH = (EBPF_CLS_ST | EBPF_MODE_MEM | EBPF_SIZE_H)
EBPF_OP_STB = (EBPF_CLS_ST | EBPF_MODE_MEM | EBPF_SIZE_B)
EBPF_OP_STDW = (EBPF_CLS_ST | EBPF_MODE_MEM | EBPF_SIZE_DW)
EBPF_OP_STXW = (EBPF_CLS_STX | EBPF_MODE_MEM | EBPF_SIZE_W)
EBPF_OP_STXH = (EBPF_CLS_STX | EBPF_MODE_MEM | EBPF_SIZE_H)
EBPF_OP_STXB = (EBPF_CLS_STX | EBPF_MODE_MEM | EBPF_SIZE_B)
EBPF_OP_STXDW = (EBPF_CLS_STX | EBPF_MODE_MEM | EBPF_SIZE_DW)
EBPF_OP_LDDW = (EBPF_CLS_LD | EBPF_MODE_IMM | EBPF_SIZE_DW)

EBPF_JA = 0x00
EBPF_JEQ = 0x10
EBPF_JGT = 0x20
EBPF_JGE = 0x30
EBPF_JSET = 0x40
EBPF_JNE = 0x50
EBPF_JSGT = 0x60
EBPF_JSGE = 0x70
EBPF_JLT = 0xa0
EBPF_JLE = 0xb0
EBPF_JSLT = 0xc0
EBPF_JSLE = 0xd0

EBPF_OP_JA = (EBPF_CLS_JMP | 0x00)
EBPF_OP_JEQ_IMM = (EBPF_CLS_JMP | EBPF_SRC_IMM | 0x10)
EBPF_OP_JEQ_REG = (EBPF_CLS_JMP | EBPF_SRC_REG | 0x10)
EBPF_OP_JGT_IMM = (EBPF_CLS_JMP | EBPF_SRC_IMM | 0x20)
EBPF_OP_JGT_REG = (EBPF_CLS_JMP | EBPF_SRC_REG | 0x20)
EBPF_OP_JGE_IMM = (EBPF_CLS_JMP | EBPF_SRC_IMM | 0x30)
EBPF_OP_JGE_REG = (EBPF_CLS_JMP | EBPF_SRC_REG | 0x30)
EBPF_OP_JSET_REG = (EBPF_CLS_JMP | EBPF_SRC_REG | 0x40)
EBPF_OP_JSET_IMM = (EBPF_CLS_JMP | EBPF_SRC_IMM | 0x40)
EBPF_OP_JNE_IMM = (EBPF_CLS_JMP | EBPF_SRC_IMM | 0x50)
EBPF_OP_JNE_REG = (EBPF_CLS_JMP | EBPF_SRC_REG | 0x50)
EBPF_OP_JSGT_IMM = (EBPF_CLS_JMP | EBPF_SRC_IMM | 0x60)
EBPF_OP_JSGT_REG = (EBPF_CLS_JMP | EBPF_SRC_REG | 0x60)
EBPF_OP_JSGE_IMM = (EBPF_CLS_JMP | EBPF_SRC_IMM | 0x70)
EBPF_OP_JSGE_REG = (EBPF_CLS_JMP | EBPF_SRC_REG | 0x70)
EBPF_OP_CALL = (EBPF_CLS_JMP | 0x80)
EBPF_OP_EXIT = (EBPF_CLS_JMP | 0x90)
EBPF_OP_JLT_IMM = (EBPF_CLS_JMP | EBPF_SRC_IMM | 0xa0)
EBPF_OP_JLT_REG = (EBPF_CLS_JMP | EBPF_SRC_REG | 0xa0)
EBPF_OP_JLE_IMM = (EBPF_CLS_JMP | EBPF_SRC_IMM | 0xb0)
EBPF_OP_JLE_REG = (EBPF_CLS_JMP | EBPF_SRC_REG | 0xb0)
EBPF_OP_JSLT_IMM = (EBPF_CLS_JMP | EBPF_SRC_IMM | 0xc0)
EBPF_OP_JSLT_REG = (EBPF_CLS_JMP | EBPF_SRC_REG | 0xc0)
EBPF_OP_JSLE_IMM = (EBPF_CLS_JMP | EBPF_SRC_IMM | 0xd0)
EBPF_OP_JSLE_REG = (EBPF_CLS_JMP | EBPF_SRC_REG | 0xd0)


def BPF_OP(code):
	return code & 0xf0


def BPF_CLASS(code):
	return code & 0x07


def BPF_SIZE(code):
	return code & 0x18


def BPF_SRC(code):
	return code & 0x8


def u32(val):
	return ctypes.c_uint32(val).value


def s32(val):
	return ctypes.c_int32(val).value


def u64(val):
	return ctypes.c_uint64(val).value


def s64(val):
	return ctypes.c_int64(val).value


def load_ebpf_bin(ebpf_bin):
	nbytes = ctypes.sizeof(EbpfInst)
	insts = []
	with open(ebpf_bin, "rb") as fp:
		inst = EbpfInst()
		while fp.readinto(inst) == nbytes:
			insts.append(inst)
			inst = EbpfInst()
	# break
	return insts


def load_ebpf_code(code: bytes):
	nbytes = ctypes.sizeof(EbpfInst)
	npos = 0
	insts = []
	while npos < len(code):
		bys = code[npos:npos + nbytes]
		if len(bys) == nbytes:
			data = EbpfInst.from_buffer_copy(bys)
			# data.dump()
			insts.append(data)
		npos += nbytes
	return insts


def dump_ebpf_code(byte_code):
	uc_str = "".join('\\x{:02x}'.format(c) for c in byte_code)
	# print(byte_code, uc_str)
	code_lines = []
	pos, li_sz = 0, 80
	while pos < len(uc_str):
		code_lines.append('"{}"'.format(uc_str[pos:pos + li_sz]))
		pos += li_sz
	fmt_str = "\n".join(code_lines)
	print(fmt_str)
